# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
orbs:
  android: circleci/android@1.0.3

# References are blocks of configurations that we can reference and reuse.
references:

  # Workspaces represent the spaces we work on & are useful for sharing data between jobs.
  # Create a workspace with the ~/code directory.
  workspace: &workspace
               ~/code

  # Docker Image Configs
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-30
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3200m -XX:+UnlockExperimentalVMOptions"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3200m"'

  # Cache - a cache mechanism for our dependencies
  gradle_key: &gradle_key
                jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
              gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      paths:
        - ~/.gradle
        - ~/.m2
      key: *gradle_key

  save_gems_cache: &save_gems_cache
    save_cache:
      paths:
        - vendor/bundle
      key: *gems_key

  # Setting ruby version
  #  install_fastlane_test: &install_fastlane_test
  #    run:
  #      name: Install Fastlane
  #      command: bundle install

  # Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: |
        gem install bundler
        bundle check || bundle update

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Keys
  decode_android_key: &decode_android_key
    run:
      name: Decode Android Keystore
      command: |
        echo $KEYSTORE_PATH | base64 -d | tee keystore.jks app/keystore.jks >/dev/null
  # ---------------------------------------------------------------------------------------------------------------------
  # DECODE FIREBASE GOOGLE_SERVICE_JSON FILE AND WRITE IT TO A FILE
  # ---------------------------------------------------------------------------------------------------------------------
  decode_gservices_key_dev: &decode_gservices_key
    run:
      name: Decode Google Services JSON Dev key
      command: |
        echo $GOOGLE_SERVICES_JSON | base64 -d | tee app/src/dev/google-services.json app/src/qa/google-services.json app/src/prod/google-services.json>/dev/null

  # ---------------------------------------------------------------------------------------------------------------------
  # INSTALL THE FIREBASE CLI FILE & ENABLE THE GLOBALLY AVAILABLE firebase COMMAND
  # ---------------------------------------------------------------------------------------------------------------------
  firebase_cli_install: &firebase_cli_install
    run:
      name: Install the Firebase CLI
      command: |
        curl -sL firebase.tools | bash

jobs:
  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: |
            if [ -z "$CIRCLE_PULL_REQUEST" != "" ]; then
              echo "Doing a Pull Request Build for ${CIRCLE_PULL_REQUEST}."
              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"qa" build_type:"debug"
            elif [[ "${CIRCLE_BRANCH}" =~ ^release-.*$ ]];  then
              echo "Doing a Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"prod" build_type:"release"
            else
              echo "Doing a default Build on the ${CIRCLE_BRANCH} branch."
              bundle exec fastlane unit_tests build_flavor:"dev" build_type:"debug"
            fi
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test_results/
          destination: /test-results/
  firebase_app_distribution_dev:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - *firebase_cli_install
      - run:
          name: Deploy latest Debug build to Firebase App Distribution
          command: bundle exec fastlane distribute_dev group:android-qa
  firebase_app_distribution_qa:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *android_dependencies
      - *ruby_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *decode_gservices_key
      - *decode_android_key
      - *firebase_cli_install
      - run:
          name: Deploy latest Beta build to Firebase App Distribution
          command: bundle exec fastlane distribute_qa group:android-qa

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - test_unit
      - firebase_app_distribution_dev:
          filters:
            branches:
              only:
                - develop
          requires:
            - test_unit
      - firebase_app_distribution_qa:
          filters:
            branches:
              only:
                - master
                - /^release-[0-9]+\.[0-9]+\.[0-9]+$/
          requires:
            - test_unit

